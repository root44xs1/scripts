local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/0o0o0o0o0o0o0o0o0o0o0o0o/0o/refs/heads/main/hj", true))()

local window = library:AddWindow("Muscle Legends V2 | Made By Dan | Private Version", {
    main_color = Color3.fromRGB(0, 0, 0),
    min_size = Vector2.new(600, 600),
    can_resize = false,
})

local Main = window:AddTab("Main")

local LocalPlayersFolder = Main:AddFolder("Local Players")

local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800)
        else
            task.wait(1)
        end
    end
end)



LocalPlayersFolder:AddSwitch("Auto Eat Protein Egg Every 30 Minutes", function(state)
    autoEatEnabled = state
end)

local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(3600)
        else
            task.wait(1)
        end
    end
end)

LocalPlayersFolder:AddSwitch("Auto Eat Protein Egg Every 1 hour", function(state)
    autoEatEnabled = state
end)




local MiscFolder = Main:AddFolder("Misc")
MiscFolder:AddSwitch("Auto Farm (Equip Any tool)", function(State)
   autoRepToggle = State
    if State then
        task.spawn(function()
            while autoRepToggle do
                game:GetService("Players").LocalPlayer:WaitForChild("muscleEvent"):FireServer("rep")
                task.wait(0.1)
            end
        end)
    end
end)
MiscFolder:AddLabel("---Script Hub---")
MiscFolder:AddButton("Permanent ShiftLock", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/MiniNoobie/ShiftLockx/main/Shiftlock-MiniNoobie"))()
end)
MiscFolder:AddLabel("---Time---")
MiscFolder:AddButton("Night", function()
    Lighting.ClockTime = 0
end)
MiscFolder:AddButton("Morning", function()
    Lighting.ClockTime = 6
end)
MiscFolder:AddButton("Day", function()
    Lighting.ClockTime = 12
end)
MiscFolder:AddLabel("----Farming----")
local AutoBrawlFolder = Main:AddFolder("Auto Brawl")
AutoBrawlFolder:AddSwitch("Auto Win Brawl", function(state)
    getgenv().autoWinBrawl = state
    task.spawn(function()
        while getgenv().autoWinBrawl and LocalPlayer.Character do
            ReplicatedStorage.rEvents.joinBrawl:FireServer("Win")
            task.wait(1)
        end
    end)
end)
AutoBrawlFolder:AddSwitch("Auto Join Brawl (For Farming)", function(state)
    getgenv().autoBrawlFarm = state
    task.spawn(function()
        while getgenv().autoBrawlFarm and LocalPlayer.Character do
            ReplicatedStorage.rEvents.joinBrawl:FireServer("Farm")
            task.wait(1)
        end
    end)
end)

AutoBrawlFolder:AddSwitch("Auto Brawl (God Mode)", function(State)
  godModeToggle = State
            if State then
                task.spawn(function()
                    while godModeToggle do
                        game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                        task.wait(0)
                    end
                end)
            end
end)




local OpStuffFolder = Main:AddFolder("Op stuff (for farm)")
OpStuffFolder:AddSwitch("Anti Knockback", function(Value)
 if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
        if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
            existingVelocity:Destroy()
        end
    end
end)
OpStuffFolder:AddSwitch("Auto Pushups with Rock (10M) and Auto Punch", function(state)
    getgenv().autoPushups10M = state
    task.spawn(function()
        while getgenv().autoPushups10M and LocalPlayer.Character do
            local pushups = LocalPlayer.Backpack:FindFirstChild("Pushups") or LocalPlayer.Character:FindFirstChild("Pushups")
            if pushups then
                pushups.Parent = LocalPlayer.Character
                ReplicatedStorage.muscleEvent:FireServer("rep")
                local rock = Workspace.machinesFolder:FindFirstChild("Ancient Jungle Rock")
                if rock and LocalPlayer:FindFirstChild("Durability") and LocalPlayer.Durability.Value >= 10000000 then
                    firetouchinterest(rock.Rock, LocalPlayer.Character.RightHand, 0)
                    firetouchinterest(rock.Rock, LocalPlayer.Character.LeftHand, 0)
                    task.wait()
                    firetouchinterest(rock.Rock, LocalPlayer.Character.RightHand, 1)
                    firetouchinterest(rock.Rock, LocalPlayer.Character.LeftHand, 1)
                    ReplicatedStorage.muscleEvent:FireServer("punch", "rightHand")
                    ReplicatedStorage.muscleEvent:FireServer("punch", "leftHand")
                end
            end
            task.wait(0.1)
        end
    end)
end)

OpStuffFolder:AddSwitch("Free AutoLift Gamepass", function(Value)
    local gamepassFolder = game:GetService("ReplicatedStorage"):FindFirstChild("gamepassIds")
    local player = game:GetService("Players").LocalPlayer

    if not gamepassFolder or not player then return end

    if Value then
        for _, gamepass in pairs(gamepassFolder:GetChildren()) do
            if not player.ownedGamepasses:FindFirstChild(gamepass.Name) then
                local value = Instance.new("IntValue")
                value.Name = gamepass.Name
                value.Value = gamepass.Value
                value.Parent = player.ownedGamepasses
            end
        end
    else
        for _, gamepass in pairs(player.ownedGamepasses:GetChildren()) do
            gamepass:Destroy()
        end
    end
end)

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)

local function createParts()
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local newPartSide = Instance.new("Part")
            newPartSide.Size = Vector3.new(partSize, 1, partSize)
            newPartSide.Position = startPosition + Vector3.new(x * partSize, 0, z * partSize)
            newPartSide.Anchored = true
            newPartSide.Transparency = 1
            newPartSide.CanCollide = true
            newPartSide.Name = "Part_Side_" .. x .. "_" .. z
            newPartSide.Parent = workspace
            table.insert(parts, newPartSide)
            
            local newPartLeftRight = Instance.new("Part")
            newPartLeftRight.Size = Vector3.new(partSize, 1, partSize)
            newPartLeftRight.Position = startPosition + Vector3.new(-x * partSize, 0, z * partSize)
            newPartLeftRight.Anchored = true
            newPartLeftRight.Transparency = 1
            newPartLeftRight.CanCollide = true
            newPartLeftRight.Name = "Part_LeftRight_" .. x .. "_" .. z
            newPartLeftRight.Parent = workspace
            table.insert(parts, newPartLeftRight)
            
            local newPartUpLeft = Instance.new("Part")
            newPartUpLeft.Size = Vector3.new(partSize, 1, partSize)
            newPartUpLeft.Position = startPosition + Vector3.new(-x * partSize, 0, -z * partSize)
            newPartUpLeft.Anchored = true
            newPartUpLeft.Transparency = 1
            newPartUpLeft.CanCollide = true
            newPartUpLeft.Name = "Part_UpLeft_" .. x .. "_" .. z
            newPartUpLeft.Parent = workspace
            table.insert(parts, newPartUpLeft)
            
            local newPartUpRight = Instance.new("Part")
            newPartUpRight.Size = Vector3.new(partSize, 1, partSize)
            newPartUpRight.Position = startPosition + Vector3.new(x * partSize, 0, -z * partSize)
            newPartUpRight.Anchored = true
            newPartUpRight.Transparency = 1
            newPartUpRight.CanCollide = true
            newPartUpRight.Name = "Part_UpRight_" .. x .. "_" .. z
            newPartUpRight.Parent = workspace
            table.insert(parts, newPartUpRight)
        end
    end
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

local function makePartsSolid()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = true
        end
    end
end

OpStuffFolder:AddSwitch("Walk on Water", function(bool)
        if bool then
        createParts()
    else
        makePartsWalkthrough()
    end

end)

OpStuffFolder:AddButton("Remove Ad Portal", function()
    for _, portal in pairs(Workspace:GetDescendants()) do
        if portal.Name:match("AdPortal") then
            portal:Destroy()
        end
    end
end)

local Killing = window:AddTab("Killing")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local playerWhitelist = {}
local targetPlayerNames = {}
local autoGoodKarma = false
local autoBadKarma = false
local autoKill = false
local killTarget = false
local spying = false
local autoEquipPunch = false
local autoPunchNoAnim = false
local targetDropdownItems = {}
local availableTargets = {}

Killing:AddLabel("Kill Aura").TextSize = 25

local dropdown = Killing:AddDropdown("Select Pet", function(text)
    local petsFolder = game.Players.LocalPlayer.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.2)

    local petName = text
    local petsToEquip = {}

    for _, pet in pairs(game.Players.LocalPlayer.petsFolder.Unique:GetChildren()) do
        if pet.Name == petName then
            table.insert(petsToEquip, pet)
        end
    end

    local maxPets = 8
    local equippedCount = math.min(#petsToEquip, maxPets)

    for i = 1, equippedCount do
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
        task.wait(0.1)
    end
end)

local Wild_Wizard = dropdown:Add("Wild Wizard")
local Mighty_Monster = dropdown:Add("Mighty Monster")

Killing:AddLabel("")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function checkCharacter()
    if not LocalPlayer.Character then
        repeat task.wait() until LocalPlayer.Character
    end
    return LocalPlayer.Character
end

local function gettool()
    for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local function isPlayerAlive(player)
    return player and player.Character
       and player.Character:FindFirstChild("HumanoidRootPart")
       and player.Character:FindFirstChild("Humanoid")
       and player.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then return end
    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        pcall(function()
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
            gettool()
        end)
    end
end

local function getPlayerDisplayText(player)
    return player.DisplayName .. " | " .. player.Name
end

_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.KillPlayerPlayers = _G.KillPlayerPlayers or {}

local function isWhitelisted(player)
    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == player.Name:lower() then
            return true
        end
    end
    return false
end

local function isKillPlayer(player)
    for _, name in ipairs(_G.KillPlayerPlayers) do
        if name:lower() == player.Name:lower() then
            return true
        end
    end
    return false
end

local whitelistTextBox = Killing:AddTextBox("Whitelist", function(inputText)
    local playerName = inputText:match("^%s*(.-)%s*$")
    if playerName ~= "" then
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == playerName:lower() then
                return
            end
        end
        table.insert(_G.whitelistedPlayers, playerName)
    end
end)

local whitelistDropdown = Killing:AddDropdown("Whitelist", function(selectedText)
    local playerName = selectedText:match("| (.+)$")
    if playerName then
        playerName = playerName:match("^%s*(.-)%s*$")
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == playerName:lower() then return end
        end
        table.insert(_G.whitelistedPlayers, playerName)
    end
end)

Killing:AddButton("Clear Whitelist", function()
    _G.whitelistedPlayers = {}
end)

Killing:AddSwitch("Whitelist Friends", function(state)
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player:IsFriendsWith(LocalPlayer.UserId) then
                local already = false
                for _, name in ipairs(_G.whitelistedPlayers) do
                    if name:lower() == player.Name:lower() then
                        already = true
                        break
                    end
                end
                if not already then
                    table.insert(_G.whitelistedPlayers, player.Name)
                end
            end
        end
    end
end)

Killing:AddSwitch("Kill All", function(state)
    _G.killAll = state
    if state then
        if not _G.killAllConnection then
            _G.killAllConnection = game:GetService("RunService").Heartbeat:Connect(function()
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and not isWhitelisted(player) then
                        killPlayer(player)
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

local KillPlayerTextbox = Killing:AddTextBox("Kill Player", function(inputText)
    local playerName = inputText:match("^%s*(.-)%s*$") -- Remove espaÃƒÆ’Ã‚Â§os no inÃƒÆ’Ã‚Â­cio/fim
    if playerName ~= "" then
        for _, name in ipairs(_G.KillPlayerPlayers) do
            if name:lower() == playerName:lower() then
                return
            end
        end
        table.insert(_G.KillPlayerPlayers, playerName)
    end
end, "Enter the player name")

local KillPlayerDropdown = Killing:AddDropdown("Kill Player", function(selectedText)
    local playerName = selectedText:match("| (.+)$")
    if playerName then
        playerName = playerName:match("^%s*(.-)%s*$")
        for _, name in ipairs(_G.KillPlayPlayers) do
            if name:lower() == playerName:lower() then return end
        end
        table.insert(_G.KillPlayerPlayers, playerName)
    end
end)

Killing:AddButton("Clear Blacklist", function()
    _G.KillPlayerPlayers = {}
end)

Killing:AddSwitch("Kill List", function(state)
    _G.killPlayerPlayersOnly = state
    if state then
        if not _G.KillPlayerKillConnection then
            _G.KillPlayerKillConnection = game:GetService("RunService").Heartbeat:Connect(function()
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and isKillPlayer(player) then
                        killPlayer(player)
                    end
                end
            end)
        end
    else
        if _G.KillPlayerKillConnection then
            _G.KillPlayerKillConnection:Disconnect()
            _G.KillPlayerKillConnection = nil
        end
    end
end)

Killing:AddLabel("")

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        local displayText = getPlayerDisplayText(player)
        whitelistDropdown:Add(displayText)
        KillPlayerDropdown:Add(displayText)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        local displayText = getPlayerDisplayText(player)
        whitelistDropdown:Add(displayText)
        KillPlayerDropdown:Add(displayText)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    local displayText = getPlayerDisplayText(player)
    whitelistDropdown:Remove(displayText)
    KillPlayerDropdown:Remove(displayText)
end)

local LocalPlayer = game.Players.LocalPlayer
local sizeToSet = 0/0
local megaSwitchEnabled = false
local posLockConnection
local safePlatform

local megaSwitch = Killing:AddSwitch("Safe Spot + Nan Size", function(state)
    megaSwitchEnabled = state

    if state then
        local posX, posY, posZ = 100000, 200, 100000
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        safePlatform = Instance.new("Part")
        safePlatform.Size = Vector3.new(200, 5, 200)
        safePlatform.Position = Vector3.new(posX, posY -5 , posZ)
        safePlatform.Anchored = true
        safePlatform.CanCollide = true
        safePlatform.Color = Color3.fromRGB(255, 0, 0)
        safePlatform.Name = "SafePlatform"
        safePlatform.Parent = workspace

        task.wait(0.2)
        humanoidRootPart.CFrame = CFrame.new(posX, posY, posZ)

        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Teletransporte",
            Text = "Teleported",
            Duration = 0
        })

        local currentPos = humanoidRootPart.CFrame
        posLockConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
            end
        end)

        task.spawn(function()
            while megaSwitchEnabled do
                pcall(function()
                    game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("Size 2")
                end)

                local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = LocalPlayer.Character
                end
                local egg = LocalPlayer.Backpack:FindFirstChild("Protein Egg")
                if egg then
                    egg.Parent = LocalPlayer.Character
                end

                local punchTool = LocalPlayer.Backpack:FindFirstChild("Punch") or LocalPlayer.Character:FindFirstChild("Punch")
                if punchTool then
                    if punchTool.Parent ~= LocalPlayer.Character then
                        punchTool.Parent = LocalPlayer.Character
                    end
                    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                end

                task.wait(0.01)
            end
        end)

    else
        if posLockConnection then
            posLockConnection:Disconnect()
            posLockConnection = nil
        end
        if safePlatform then
            safePlatform:Destroy()
            safePlatform = nil
        end
    end
end)

local button = Killing:AddSwitch("No Punch Animation", function(state)
    if state then
        local blockedAnimations = {
            ["rbxassetid://3638729053"] = true,
            ["rbxassetid://3638767427"] = true,
        }

        local function stopBlockedAnimations(humanoid)
            for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                if track.Animation then
                    local animId = track.Animation.AnimationId
                    local animName = track.Name:lower()
                    if blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or animName:match("right") then
                        track:Stop()
                    end
                end
            end
        end

        local function setupAnimationBlocking()
            local char = LocalPlayer.Character
            if not char or not char:FindFirstChild("Humanoid") then return end
            local humanoid = char:FindFirstChild("Humanoid")

            stopBlockedAnimations(humanoid)

            if not _G.AnimBlockConnection then
                _G.AnimBlockConnection = humanoid.AnimationPlayed:Connect(function(track)
                    if track.Animation then
                        local animId = track.Animation.AnimationId
                        local animName = track.Name:lower()
                        if blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or animName:match("right") then
                            track:Stop()
                        end
                    end
                end)
            end
        end

        setupAnimationBlocking()

        _G.AutoPunchLoop = true
        task.spawn(function()
            while _G.AutoPunchLoop do
                local char = LocalPlayer.Character
                if char and char:FindFirstChild("Humanoid") then
                    stopBlockedAnimations(char.Humanoid)
                end

                local punch = LocalPlayer.Backpack:FindFirstChild("Punch") or (char and char:FindFirstChild("Punch"))
                if punch then
                    if punch.Parent ~= char then
                        punch.Parent = char
                    end
                    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                end
                task.wait(0.01)
            end
        end)

        if not _G.CharacterAddedConnection then
            _G.CharacterAddedConnection = LocalPlayer.CharacterAdded:Connect(function()
                task.wait(1)
                setupAnimationBlocking()
            end)
        end
    else
        _G.AutoPunchLoop = false
        if _G.AnimBlockConnection then _G.AnimBlockConnection:Disconnect() _G.AnimBlockConnection = nil end
    end
end)